#!/usr/bin/env python3
"""
Script setup Neo4j database v·ªõi indexes v√† constraints c·∫ßn thi·∫øt
"""
import sys
import os
import logging

# Add src to path
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from src.core.knowledge_graph.neo4j_manager import neo4j_manager
from config.neo4j_config import neo4j_config

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def setup_neo4j():
    """Setup Neo4j database v·ªõi t·∫•t c·∫£ c·∫•u h√¨nh c·∫ßn thi·∫øt"""
    
    logger.info("üöÄ B·∫Øt ƒë·∫ßu setup Neo4j database...")
    
    # 1. K·∫øt n·ªëi v·ªõi Neo4j
    logger.info("üì° ƒêang k·∫øt n·ªëi v·ªõi Neo4j...")
    if not neo4j_manager.connect():
        logger.error("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi Neo4j!")
        return False
    
    # 2. Ki·ªÉm tra s·ª©c kh·ªèe database
    health = neo4j_manager.health_check()
    if health["status"] != "connected":
        logger.error(f"‚ùå Database kh√¥ng s·∫µn s√†ng: {health}")
        return False
    
    logger.info(f"‚úÖ K·∫øt n·ªëi th√†nh c√¥ng v·ªõi Neo4j: {health}")
    
    # 3. T·∫°o indexes v√† constraints
    logger.info("üîß ƒêang t·∫°o indexes v√† constraints...")
    try:
        neo4j_manager.create_indexes()
        logger.info("‚úÖ ƒê√£ t·∫°o indexes th√†nh c√¥ng")
    except Exception as e:
        logger.error(f"‚ùå L·ªói t·∫°o indexes: {e}")
        return False
    
    # 4. T·∫°o th√™m indexes cho performance
    additional_indexes = [
        # Indexes cho t√¨m ki·∫øm text
        "CREATE INDEX entity_name_text_idx IF NOT EXISTS FOR (n:Entity) ON (n.name)",
        "CREATE INDEX entity_description_idx IF NOT EXISTS FOR (n:Entity) ON (n.description)",
        
        # Indexes cho document processing
        "CREATE INDEX document_filename_idx IF NOT EXISTS FOR (n:Document) ON (n.filename)",
        "CREATE INDEX document_type_idx IF NOT EXISTS FOR (n:Document) ON (n.file_type)",
        
        # Indexes cho timestamps
        "CREATE INDEX entity_created_idx IF NOT EXISTS FOR (n:Entity) ON (n.created_at)",
        #"CREATE INDEX relationship_created_idx IF NOT EXISTS FOR ()-[r]-() ON (r.created_at)",
        
        # Indexes cho categories
        "CREATE INDEX category_name_idx IF NOT EXISTS FOR (n:Category) ON (n.name)",
        
        # Indexes cho features
        "CREATE INDEX feature_priority_idx IF NOT EXISTS FOR (n:Feature) ON (n.priority)",
    ]
    
    for index_query in additional_indexes:
        try:
            neo4j_manager.execute_query(index_query)
            logger.info(f"‚úÖ T·∫°o index: {index_query[:50]}...")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫°o index: {e}")
    
    # 5. T·∫°o sample categories n·∫øu ch∆∞a c√≥
    logger.info("üìù ƒêang t·∫°o sample categories...")
    create_sample_categories()
    
    # 6. T·∫°o sample viewpoints
    logger.info("üí≠ ƒêang t·∫°o sample viewpoints...")
    create_sample_viewpoints()
    
    # 7. Hi·ªÉn th·ªã th·ªëng k√™ cu·ªëi c√πng
    final_health = neo4j_manager.health_check()
    logger.info(f"üìä Setup ho√†n t·∫•t! Stats: {final_health['stats']}")
    
    return True


def create_sample_categories():
    """T·∫°o c√°c categories m·∫´u cho product classification"""
    
    categories = [
        {"name": "Mobile Application", "description": "·ª®ng d·ª•ng di ƒë·ªông cho iOS/Android"},
        {"name": "Web Application", "description": "·ª®ng d·ª•ng web ch·∫°y tr√™n browser"},
        {"name": "Desktop Software", "description": "Ph·∫ßn m·ªÅm ch·∫°y tr√™n m√°y t√≠nh"},
        {"name": "API/Backend Service", "description": "D·ªãch v·ª• backend v√† API"},
        {"name": "Data Analytics Platform", "description": "N·ªÅn t·∫£ng ph√¢n t√≠ch d·ªØ li·ªáu"},
        {"name": "E-commerce Platform", "description": "N·ªÅn t·∫£ng th∆∞∆°ng m·∫°i ƒëi·ªán t·ª≠"},
        {"name": "Content Management System", "description": "H·ªá th·ªëng qu·∫£n l√Ω n·ªôi dung"},
        {"name": "Enterprise Software", "description": "Ph·∫ßn m·ªÅm doanh nghi·ªáp"},
        {"name": "IoT Solution", "description": "Gi·∫£i ph√°p Internet of Things"},
        {"name": "AI/ML Platform", "description": "N·ªÅn t·∫£ng AI v√† Machine Learning"}
    ]
    
    for category in categories:
        query = """
        MERGE (c:Category {name: $name})
        SET c.description = $description,
            c.created_at = datetime()
        """
        try:
            neo4j_manager.execute_query(query, category)
            logger.info(f"‚úÖ T·∫°o category: {category['name']}")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫°o category {category['name']}: {e}")


def create_sample_viewpoints():
    """T·∫°o c√°c viewpoints m·∫´u cho clarification questions"""
    
    viewpoints = [
        {
            "name": "Technical Requirements",
            "description": "Y√™u c·∫ßu k·ªπ thu·∫≠t v√† c√¥ng ngh·ªá",
            "questions": [
                "Programming language preferences?",
                "Database requirements?", 
                "Third-party integrations needed?",
                "Performance benchmarks?"
            ]
        },
        {
            "name": "Business Logic",
            "description": "Logic nghi·ªáp v·ª• v√† quy tr√¨nh",
            "questions": [
                "Core business processes?",
                "User roles and permissions?",
                "Business rules and validations?",
                "Workflow requirements?"
            ]
        },
        {
            "name": "User Experience",
            "description": "Tr·∫£i nghi·ªám ng∆∞·ªùi d√πng",
            "questions": [
                "Target user demographics?",
                "UI/UX preferences?",
                "Accessibility requirements?",
                "Mobile responsiveness needed?"
            ]
        },
        {
            "name": "Security Requirements",
            "description": "Y√™u c·∫ßu b·∫£o m·∫≠t",
            "questions": [
                "Authentication methods?",
                "Data encryption requirements?",
                "Compliance standards?",
                "Security audit needs?"
            ]
        },
        {
            "name": "Data Requirements",
            "description": "Y√™u c·∫ßu v·ªÅ d·ªØ li·ªáu",
            "questions": [
                "Data sources and formats?",
                "Data volume expectations?",
                "Backup and recovery needs?",
                "Data migration requirements?"
            ]
        }
    ]
    
    for viewpoint in viewpoints:
        query = """
        MERGE (v:Viewpoint {name: $name})
        SET v.description = $description,
            v.questions = $questions,
            v.created_at = datetime()
        """
        try:
            neo4j_manager.execute_query(query, viewpoint)
            logger.info(f"‚úÖ T·∫°o viewpoint: {viewpoint['name']}")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫°o viewpoint {viewpoint['name']}: {e}")


def cleanup_database():
    """X√≥a t·∫•t c·∫£ d·ªØ li·ªáu trong database (c·∫©n th·∫≠n!)"""
    
    confirm = input("‚ö†Ô∏è B·∫†N C√ì CH·∫ÆC MU·ªêN X√ìA T·∫§T C·∫¢ D·ªÆ LI·ªÜU? (yes/no): ")
    if confirm.lower() != "yes":
        logger.info("‚ùå H·ªßy b·ªè cleanup")
        return
    
    logger.warning("üóëÔ∏è ƒêang x√≥a t·∫•t c·∫£ d·ªØ li·ªáu...")
    try:
        neo4j_manager.clear_database(confirm=True)
        logger.warning("‚úÖ ƒê√£ x√≥a t·∫•t c·∫£ d·ªØ li·ªáu")
    except Exception as e:
        logger.error(f"‚ùå L·ªói cleanup: {e}")


if __name__ == "__main__":
    import argparse
    
    parser = argparse.ArgumentParser(description="Setup Neo4j database")
    parser.add_argument("--cleanup", action="store_true", help="X√≥a t·∫•t c·∫£ d·ªØ li·ªáu")
    parser.add_argument("--setup", action="store_true", default=True, help="Setup database")
    
    args = parser.parse_args()
    
    try:
        if args.cleanup:
            cleanup_database()
        
        if args.setup:
            success = setup_neo4j()
            if success:
                logger.info("üéâ Setup Neo4j ho√†n t·∫•t th√†nh c√¥ng!")
                sys.exit(0)
            else:
                logger.error("üí• Setup Neo4j th·∫•t b·∫°i!")
                sys.exit(1)
                
    except KeyboardInterrupt:
        logger.info("üëã ƒê√£ h·ªßy b·ªè setup")
        sys.exit(0)
    except Exception as e:
        logger.error(f"üí• L·ªói kh√¥ng mong ƒë·ª£i: {e}")
        sys.exit(1)
    finally:
        neo4j_manager.disconnect() 